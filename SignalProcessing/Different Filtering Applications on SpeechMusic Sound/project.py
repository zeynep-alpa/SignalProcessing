# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-H-2QlQ027RIWOnAX27RHweCpXG530wM
"""

from google.colab import files

uploaded = files.upload()

import numpy as np
import scipy.signal as signal
import matplotlib.pyplot as plt
import soundfile as sf

# Ses dosyasını yükleme
audio_path = "proje.wav"
audio, sample_rate = sf.read(audio_path)

# Filtreleme işlemleri
def apply_lowpass_filter(audio, sample_rate, cutoff_freq):
    nyquist_freq = 0.5 * sample_rate
    normalized_cutoff_freq = cutoff_freq / nyquist_freq
    b, a = signal.butter(4, normalized_cutoff_freq, btype='low', analog=False)
    filtered_audio = signal.lfilter(b, a, audio)
    return filtered_audio, b, a

def apply_highpass_filter(audio, sample_rate, cutoff_freq):
    nyquist_freq = 0.5 * sample_rate
    normalized_cutoff_freq = cutoff_freq / nyquist_freq
    b, a = signal.butter(4, normalized_cutoff_freq, btype='high', analog=False)
    filtered_audio = signal.lfilter(b, a, audio)
    return filtered_audio, b, a

def apply_bandpass_filter(audio, sample_rate, low_cutoff_freq, high_cutoff_freq):
    nyquist_freq = 0.5 * sample_rate
    normalized_low_cutoff_freq = low_cutoff_freq / nyquist_freq
    normalized_high_cutoff_freq = high_cutoff_freq / nyquist_freq
    b, a = signal.butter(4, [normalized_low_cutoff_freq, normalized_high_cutoff_freq], btype='band', analog=False)
    filtered_audio = signal.lfilter(b, a, audio)
    return filtered_audio, b, a

# Filtre uygulamaları
cutoff_freq_lp1 = 500  # Alçak geçiren filtre kesim frekansı 1
filtered_audio_lp1, b_lp1, a_lp1 = apply_lowpass_filter(audio, sample_rate, cutoff_freq_lp1)

cutoff_freq_lp2 = 1000  # Alçak geçiren filtre kesim frekansı 2
filtered_audio_lp2, b_lp2, a_lp2 = apply_lowpass_filter(audio, sample_rate, cutoff_freq_lp2)

cutoff_freq_hp1 = 1000  # Yüksek geçiren filtre kesim frekansı 1
filtered_audio_hp1, b_hp1, a_hp1 = apply_highpass_filter(audio, sample_rate, cutoff_freq_hp1)

cutoff_freq_hp2 = 2000  # Yüksek geçiren filtre kesim frekansı 2
filtered_audio_hp2, b_hp2, a_hp2 = apply_highpass_filter(audio, sample_rate, cutoff_freq_hp2)

low_cutoff_freq_bp1 = 500  # Band geçiren filtre düşük kesim frekansı 1
high_cutoff_freq_bp1 = 1500  # Band geçiren filtre yüksek kesim frekansı 1
filtered_audio_bp1, b_bp1, a_bp1 = apply_bandpass_filter(audio, sample_rate, low_cutoff_freq_bp1, high_cutoff_freq_bp1)

low_cutoff_freq_bp2 = 1000  # Band geçiren filtre düşük kesim frekansı 2
high_cutoff_freq_bp2 = 2000  # Band geçiren filtre yüksek kesim frekansı 2
filtered_audio_bp2, b_bp2, a_bp2 = apply_bandpass_filter(audio, sample_rate, low_cutoff_freq_bp2, high_cutoff_freq_bp2)

# Grafikleri çizme
plt.figure(figsize=(12, 14))

# Filtrelenmemiş sesin dalga formu
plt.subplot(621)
plt.plot(audio)
plt.title('Filtrelenmemiş Ses')
plt.xlabel('Örnek')
plt.ylabel('Genlik')

# Alçak geçiren filtre 1 sonrası sesin dalga formu
plt.subplot(622)
plt.plot(filtered_audio_lp1)
plt.title('Alçak Geçiren Filtre 1 Sonrası Ses')
plt.xlabel('Örnek')
plt.ylabel('Genlik')

# Alçak geçiren filtre 2 sonrası sesin dalga formu
plt.subplot(623)
plt.plot(filtered_audio_lp2)
plt.title('Alçak Geçiren Filtre 2 Sonrası Ses')
plt.xlabel('Örnek')
plt.ylabel('Genlik')

# Yüksek geçiren filtre 1 sonrası sesin dalga formu
plt.subplot(624)
plt.plot(filtered_audio_hp1)
plt.title('Yüksek Geçiren Filtre 1 Sonrası Ses')
plt.xlabel('Örnek')
plt.ylabel('Genlik')

# Yüksek geçiren filtre 2 sonrası sesin dalga formu
plt.subplot(625)
plt.plot(filtered_audio_hp2)
plt.title('Yüksek Geçiren Filtre 2 Sonrası Ses')
plt.xlabel('Örnek')
plt.ylabel('Genlik')

# Band geçiren filtre 1 sonrası sesin dalga formu
plt.subplot(626)
plt.plot(filtered_audio_bp1)
plt.title('Band Geçiren Filtre 1 Sonrası Ses')
plt.xlabel('Örnek')
plt.ylabel('Genlik')

# Band geçiren filtre 2 sonrası sesin dalga formu
plt.subplot(627)
plt.plot(filtered_audio_bp2)
plt.title('Band Geçiren Filtre 2 Sonrası Ses')
plt.xlabel('Örnek')
plt.ylabel('Genlik')

# Frekans cevabını hesaplama
w_lp1, h_lp1 = signal.freqz(b_lp1, a_lp1, fs=sample_rate)
w_lp2, h_lp2 = signal.freqz(b_lp2, a_lp2, fs=sample_rate)
w_hp1, h_hp1 = signal.freqz(b_hp1, a_hp1, fs=sample_rate)
w_hp2, h_hp2 = signal.freqz(b_hp2, a_hp2, fs=sample_rate)
w_bp1, h_bp1 = signal.freqz(b_bp1, a_bp1, fs=sample_rate)
w_bp2, h_bp2 = signal.freqz(b_bp2, a_bp2, fs=sample_rate)

# Alçak geçiren filtre 1 frekans cevabı
plt.subplot(628)
plt.plot(w_lp1, np.abs(h_lp1))
plt.title('Alçak Geçiren 2 Filtre Frekans Cevabı')
plt.xlabel('Frekans (Hz)')
plt.ylabel('Genlik')

# Alçak geçiren filtre 2 frekans cevabı
plt.subplot(628)
plt.plot(w_lp2, np.abs(h_lp2))
plt.title('Alçak Geçiren 2 Filtre Frekans Cevabı')
plt.xlabel('Frekans (Hz)')
plt.ylabel('Genlik')

# Yüksek geçiren filtre 1 frekans cevabı
plt.subplot(6,2,11)
plt.plot(w_hp1, np.abs(h_hp1))
plt.title('Yüksek Geçiren 2 Filtre Frekans Cevabı')
plt.xlabel('Frekans (Hz)')
plt.ylabel('Genlik')

# Yüksek geçiren filtre 2 frekans cevabı
plt.subplot(6,2,11)
plt.plot(w_hp2, np.abs(h_hp2))
plt.title('Yüksek Geçiren 2 Filtre Frekans Cevabı')
plt.xlabel('Frekans (Hz)')
plt.ylabel('Genlik')

# Band geçiren filtre 1 frekans cevabı
plt.subplot(6,2,12)
plt.plot(w_bp1, np.abs(h_bp1))
plt.title('Band Geçiren 2 Filtre  Frekans Cevabı')
plt.xlabel('Frekans (Hz)')
plt.ylabel('Genlik')

# Band geçiren filtre 2 frekans cevabı
plt.subplot(6,2,12)
plt.plot(w_bp2, np.abs(h_bp2))
plt.title('Band Geçiren 2 Filtre Frekans Cevabı')
plt.xlabel('Frekans (Hz)')
plt.ylabel('Genlik')

plt.tight_layout()
plt.show()

# Tüm filtrelenmiş sesleri birleştirme
combined_audio = np.concatenate((audio, filtered_audio_lp1, filtered_audio_lp2, filtered_audio_hp1, filtered_audio_hp2, filtered_audio_bp1, filtered_audio_bp2))

# Birleştirilmiş sesi bir dosyaya kaydetme
combined_audio_path = "birlesik_ses.wav"
sf.write(combined_audio_path, combined_audio, sample_rate)